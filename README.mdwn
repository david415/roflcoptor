# ROFLCopTor

ROFLCopTor aims to be an exhaustive Tor control port filter daemon written in golang.

# Introduction

The Tor control port exposes powerful functionality, much more authority than most
applications need when they talk to the Tor control port. In accordance with the
principal of least authority each software module would ideally have authority
over only the resources needed to perform it's tasks. Here in the context of ROFLCopTor,
we seek to illiminate excess authority from applications which utilize the Tor control port,
therefore they will not be in the debian-tor group or otherwise have access to the tor
control port UNIX domain socket or TCP listener. The only available access to the tor control
port being via ROFLCoptor which exposes a TCP listener and or a UNIX domain socket. Applications
can be allowed to authenticate with ROFLCoptor but this isn't necessary because the filtration
policy is applied based on the client application's exec path which is discovered by matching
the socket inode via the Linux proc filesystem.

# Usage

A simple usage:

```
./roflcoptor -help
Usage of ./roflcoptor:
   -config string
      configuration file
   -watch
      watch-mode of operation will default to unfiltered-allow policy
```

Normally watch-mode is only used when creating new filter rule sets.


# Configuration

Configure your /etc/tor/torrc with a control port listening on a UNIX domain socket:

```
ControlPort unix:/var/run/tor/control.socket GroupWritable
CookieAuthentication 0
```

You have the option to use systemd to manage the starting/stopping of roflcoptor.
Place the systemd unit file for roflcoptor daemon in /etc/systemd/system/roflcoptor.
It should look something like this:

```
[Unit]
Description=roflcoptor - onion router control port filtration daemon
After=tor.service

[Service]
Type=simple
User=roflcoptor
Group=roflcoptor
WorkingDirectory=/var/log/tor
ExecStart=/usr/local/bin/roflcoptor -config /etc/roflcoptor/roflcoptor_config.json
```

Run roflcoptor as the roflcoptor user and group. However you must be able to read and write to
the tor and procsnitch UNIX domain sockets. Therefore the roflcoptor user must be in the debian-tor
and procsnitch groups. Your /etc/group file should contain entries like these:

```
debian-tor:x:111:roflcoptor
roflcoptor:x:1001:
procsnitch:x:1002:roflcoptor
```

Create and chown the roflcoptor related directories:

```
mkdir /etc/roflcoptor
mkdir /etc/roflcoptor/filters
mkdir /var/run/roflcoptor
chown roflcoptor:roflcoptor /etc/roflcoptor
chown roflcoptor:roflcoptor /etc/roflcoptor/filters
chown roflcoptor:roflcoptor /var/run/roflcoptor
```

The json configuration file, /etc/roflcoptor/roflcoptor_config.json should look like this:

```
{
    "ProcSnitchSocketFile" : "/var/run/procsnitchd/rpc.socket",
    "FiltersPath" : "/etc/roflcoptor/filters",
    "TorControlNet" : "unix",
    "TorControlAddress" : "/var/run/tor/control",
    "Listeners" : [
	{
	    "Net" : "unix",
	    "Address" : "/var/run/roflcoptor/roflcoptor.socket"
	},
	{
	    "Net" : "tcp",
	    "Address" : "127.0.0.1:9051"
	}
    ]
}
```


The above mentioned ``ProcSnitchSocketFile`` refers to the UNIX domain socket which the procsnitch daemon is listening.
Procsnitch daemon is essentially a privilege seperation component of roflcoptor.

Please see https://github.com/subgraph/procsnitchd


# Acknowledgements

ROFLCopTor is derived from @Yawning's [or-ctl-filter](https://github.com/Yawning/or-ctl-filter) and @david415's [or-ctl-sieve](https://github.com/david415/or-ctl-sieve) which was derived from collaboration with Leif Ryge in making this proof of concept filter [twistedcat-armfilter-hax](https://github.com/david415/twistedcat/tree/armfilter-hax).